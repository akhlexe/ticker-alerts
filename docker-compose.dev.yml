services:
  frontend:
    container_name: frontend
    build: ./src/frontend/TickerAlertApp/
    ports:
      - ${FRONTEND_PORT}:80
      - 443:443
    depends_on:
      - backend-api
    networks:
      - tickers-network
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf

  backend-api:
    container_name: backend-api
    build:
      context: ./src/backend/TickerAlert/
      dockerfile: ./TickerAlert.Api/Dockerfile
    environment:
      - AllowedHosts=*
      - AllowedOrigins__AngularApp=${ANGULAR_APP_ORIGIN}
      - ConnectionStrings__TickerAlertsDatabase=${API_DB_CONNECTION_STRING}
      - Services__Finnhub__BaseUrl=${FINNHUB_BASEURL}
      - Services__Finnhub__ApiKey=${FINNHUB_API_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Jwt__Key=${JWT_KEY}
      - ASPNETCORE_URLS=http://*:80
      - EmailService__ApiKey=${EMAIL_SERVICE_API_KEY}
      - EmailService__ApiBaseUrl=${EMAIL_SERVICE_API_BASE_URL}
      - EmailService__SenderEmail=${EMAIL_SERVICE_SENDER_EMAIL}
      - EmailService__SenderName=${EMAIL_SERVICE_SENDER_NAME}
      - Redis__Host=${REDIS_HOST}
      - Redis__Port=${REDIS_PORT}
      - Redis__Password=${REDIS_PASSWORD}
    depends_on:
      ticker-db:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - tickers-network

  ticker-db:
    container_name: ticker-db
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: TickerAlert
      PGDATA: /var/lib/postgresql/data/pgdata
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tickers-network

  redis:
    image: redis:7-alpine
    container_name: redis-container
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis-data:/data
    networks:
      - tickers-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "0:5672" # RabbitMQ default messaging port
      - "0:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: ${RABBIMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
    name: postgres_data_volume
    driver: local
  redis-data:
    name: redis_data_volume

networks:
  tickers-network:
    driver: bridge
